package com.aaronespiritu.adespiri_feelsbook;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.PopupMenu;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.ArrayList;

public class HistoryActivity extends AppCompatActivity {

    ListView listview;
    ArrayAdapter<String> adapter;
    Emotion_List emotionList;
    SharedPreferences sharedpreferences;
    PopupMenu historyPopup;
    String serializedString;
    ArrayList<String> stringList;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.emotion_history);
        listview = (ListView) findViewById(R.id.history_ListView);

        //setup onclick listener for menuitems
        listview.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override //autocreated
            public void onItemClick(AdapterView<?> parent, View view, final int position, long id) {
                //create popup menu
                PopupMenu historyPopup = new PopupMenu(HistoryActivity.this, view);
                historyPopup.getMenuInflater().inflate(R.menu.historypopup, historyPopup.getMenu());

                //set onclicklistener
                historyPopup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
                    @Override //autogenerated
                    public boolean onMenuItemClick(MenuItem item) {
                        //determine which activity to go to or to delete object
                        if(item.getItemId() == R.id.editCommentMenu)
                        {

                            Intent intent = new Intent(HistoryActivity.this, EditCommentActivity.class);
                            intent.putExtra("ARRAYPOSITION", position);

                            startActivity(intent);
                        }

                        else if (item.getItemId() == R.id.deleteMenu)
                        {
                            //call delete function
                            deleteEmotion(position);
                        }

                        else if(item.getItemId() == R.id.editDateMenu)
                        {   //jump to date edit activity
                            Intent intent = new Intent(HistoryActivity.this, DateEdit.class);
                            intent.putExtra("ARRAYPOSITION", position);
                            startActivity(intent);

                        }
                        return true;
                    }
                });
                historyPopup.show(); //display
            }
        });
        {

        };

    }


    @Override
    protected void onStart() {
        super.onStart();
            sharedpreferences = getSharedPreferences("MyPrefs", Context.MODE_PRIVATE); //initialize sharedpreferences
            //update emotion_list
            Gson gson = new Gson();
            serializedString = sharedpreferences.getString("listkey", "");
            emotionList = gson.fromJson(serializedString, new TypeToken<Emotion_List>(){}.getType());
            //we want to update the current sorted list and display them one by one
            //we need to create a string array with all the emotions currently being stored
            stringList = new ArrayList<String>();
            emotionList.consolidateEmotions();
            emotionList.sortEmotions();
            updateStringList();
        //Toast.makeText(HistoryActivity.this, emotionList.getEmotionList().toString(), Toast.LENGTH_SHORT).show();
            adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, stringList);
            listview.setAdapter(adapter);







    }

    @Override
    protected void onPause()
    {
        super.onPause();
        SharedPreferences.Editor editor = sharedpreferences.edit();
        //save data
        emotionList.organizeEmotions();
        Gson gson = new Gson();
        emotionList.getEmotionList().clear(); //clear emotion list to prevent errors on startup
        String serializedEmotionList = gson.toJson(emotionList);

        editor.remove("listkey").commit();
        editor.putString("listkey", serializedEmotionList);
        editor.commit();
    }



    private void updateStringList()
    {

        //sort the emotion array before adding to Stringlist
        emotionList.sortEmotions();
        //clear current list
        stringList.clear();
        for (Emotion emotion : emotionList.getEmotionList()) {
            //add the string to the stringlist
            stringList.add(emotion.returnEmotionString());

        }
    }
    private void deleteEmotion(int position)
    {
        //this method will take the position of the item selected and delete it from emotionList
        Emotion emotion = emotionList.getEmotionList().get(position);
        //update counter
        updateCounter(emotion);
        //remove
        emotionList.getEmotionList().remove(position);
        updateStringList();
        adapter.notifyDataSetChanged();
    }

    private void updateCounter(Emotion emotion)
    {
        //instantiate counter
        Counter counter = new Counter();

        //get type and update accordingly
        Class classType = emotion.getClass();
        if(classType == Sad.class)
        {
            counter.remove_sad();
        }

        else if(classType == Anger.class)
        {
            counter.remove_anger();
        }

        else if(classType == Surprise.class)
        {
            counter.remove_surprise();
        }

        else if(classType == Joy.class)
        {
            counter.remove_joy();
        }

        else if(classType == Love.class)
        {
            counter.remove_love();
        }

        else if (classType == Fear.class)
        {
            counter.remove_fear();
        }
    }
}
